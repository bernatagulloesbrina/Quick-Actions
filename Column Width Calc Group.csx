#r "Microsoft.VisualBasic"
using Microsoft.VisualBasic;

// '2021-10-03 / B.Agullo / 
// Code mostly generated by @Avatori's script published in https://powerofbi.org/2021/09/14/backup-restore-all-calculation-groups-workaround-required-for-some-visuals/
// "Auto" calc item needs manual tuning that can be done once the calc group is created, instructions included in the calc item. 

// all parameters are required at run time so it can be stored as macro at model level



string calcGroupName = Interaction.InputBox("Provide a name for your Calc Group", "Calc Group Name", "Column Width", 740, 400);
string minWidth = Interaction.InputBox("Entere minimum column width", "Min Column Width", "5", 740, 400);

int minWidthInt; 

bool isMinWidthANumber = Int32.TryParse(minWidth, out minWidthInt); 

if (!isMinWidthANumber) {
    Error(minWidth + " is not a positive integer. Invalid width"); 
    return; 
} else if(minWidthInt < 0) { 
    Error(minWidth + " is smaller than 0. Invalid Min width."); 
    return; 
}; 

string maxWidth = Interaction.InputBox("Entere minimum column width", "Min Column Width", "7", 740, 400);

int maxWidthInt; 

bool isMaxWidthANumber = Int32.TryParse(maxWidth, out maxWidthInt); 

if (!isMaxWidthANumber) {
    Error(maxWidth + " is not a positive integer. Invalid width"); 
    return; 
} else if(maxWidthInt < minWidthInt) { 
    Error(maxWidth + " is smaller than " + minWidthInt +". Invalid Max width."); 
    return; 
}; 


//create calculation group Column Width
var calculationGroupTable1 = Model.AddCalculationGroup ();
(Model.Tables["New Calculation Group"] as CalculationGroupTable).CalculationGroup.Precedence = 1;
calculationGroupTable1.Name = calcGroupName;
calculationGroupTable1.Columns["Name"].Name = calcGroupName; 


for( int i = minWidthInt; i<=maxWidthInt; i++) {

    //create calculation item 5
    var calculationItem1 = calculationGroupTable1.AddCalculationItem(Convert.ToString(i,10));
    calculationItem1.Expression = @"SELECTEDMEASURE()";
    calculationItem1.FormatStringExpression = @"VAR currentValue =
        SELECTEDMEASURE()
    VAR currentLength =
        LEN(  CONVERT( currentValue, STRING ) ) 
        
    VAR selectedLength = CONVERT( SELECTEDVALUE( 'Column Width'[Column Width], currentLength ), INTEGER )

    VAR extraSpaces = IF( selectedLength > currentLength, selectedLength - currentLength, 0 ) 

    VAR prefix =
        REPT( UNICHAR(0160), extraSpaces )
    RETURN
        """""""" & prefix & """"""""
            & SELECTEDMEASUREFORMATSTRING()";
    calculationItem1.FormatDax();

}; 



//create calculation item auto;
calculationItem1 = calculationGroupTable1.AddCalculationItem("auto");
calculationItem1.Expression = @"SELECTEDMEASURE()";
calculationItem1.FormatStringExpression = @"//// instructions to enable auto-mode: 
// 1. delete line SELECTEDMEASUREFORMATSTRING() that is not commented 
// 2. uncomment the rest of the code 
// 3. replace the expression for maxValue for an expression that will return the max value of your matrix
// You can duplicate the calc item to use in diferent matrices of your report

SELECTEDMEASUREFORMATSTRING()

//VAR currentValue =
//    SELECTEDMEASURE()
//VAR currentLength =
//    LEN(  CONVERT( currentValue, STRING ) ) 
//
//VAR maxValue = CALCULATE(MAXX(SUMMARIZE('Sales','Sales'[Order number],'Sales'[Customer]),SELECTEDMEASURE()),ALLSELECTED( sales ))
//VAR maxLength = LEN( TRIM( CONVERT( maxValue, STRING ) )) //+ X if you want some padding
//
//VAR extraSpaces = IF( maxLength > currentLength, maxLength - currentLength, 0 ) 
//
//VAR prefix =
//    REPT( UNICHAR(0160), extraSpaces )
//RETURN
//    """""""" & prefix & """"""""
//        & SELECTEDMEASUREFORMATSTRING()";
calculationItem1.FormatDax();